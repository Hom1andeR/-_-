Vue.component('card', {
props: {
column_id: {
type: String,
required: true,
},
indexInList: {
type: Number,
required: true,
},
exampleCard: {
type: Object,
required: true,
}
},
data() {
return {
errorRefund: null,
cardRedactionFlag: false,
showReasonRefundFlag: false,
blankForRedaction: {
dateOfRed: {
year: new Date().getFullYear(),
month: new Date().getMonth(),
day: new Date().getDate(),
hour: new Date().getHours(),
min: new Date().getMinutes(),
},
title: null,
description: null,
deadline: null,
}
};
},
template: `
<div :class="{'card-space' : !exampleCard.overdueFlag, 'red-card-space' : exampleCard.overdueFlag}">
<p><b>Название: {{exampleCard.title}}</b></p>
<input type="text" v-if="cardRedactionFlag" v-model="blankForRedaction.title">

<p><b>Описание:</b>
{{exampleCard.description}}</p>
<textarea col="24" rows="4" v-if="cardRedactionFlag" v-model="blankForRedaction.description"></textarea>

<div v-show="exampleCard.date.day"><b>Задание создано :</b>
<span>{{exampleCard.date.day}}.</span>
<span>{{exampleCard.date.month}}.</span>
<span>{{exampleCard.date.year}}</span>
&nbsp
<span>{{exampleCard.date.hour}}:</span>
<span>{{exampleCard.date.min}}</span>
</div>

<div v-show="exampleCard.dateOfRed.day"><b>Задание редактировано :</b>
<span>{{exampleCard.dateOfRed.day}}.</span>
<span>{{exampleCard.dateOfRed.month}}.</span>
<span>{{exampleCard.dateOfRed.year}}</span>
&nbsp
<span>{{exampleCard.dateOfRed.hour}}:</span>
<span>{{exampleCard.dateOfRed.min}}</span>
</div>

<p v-show="cardRedactionFlag"><b>Поменять дэдлайн :</b><input type="date" v-model="blankForRedaction.deadline"> </p>

<p><b>Сделать до:</b> {{exampleCard.deadline}}</p>

<p class="blue_text" v-if="exampleCard.reasonsRefund && exampleCard.reasonsRefund.length > 0">
<b>Нужно было доработать:</b>
<ul>
<li v-for="reason in exampleCard.reasonsRefund">{{ reason }}</li>
</ul>
</p>

<button class="btn_style" v-show="column_id=='first' && !cardRedactionFlag" @click.prevent="deleteCard(indexInList)">Удалить</button>
<button class="btn_style" v-show="(column_id=='first' || column_id=='second') && !cardRedactionFlag" @click.prevent="cardRedactionFlag= true">Редактировать</button>
<button class="btn_style" v-show="cardRedactionFlag" @click.prevent="cancelRedaction">Отмена</button>
<button class="btn_style" v-show="cardRedactionFlag" @click.prevent="submitRedForm">Сохранить</button>
<button class="move_btn btn_style" v-show="column_id=='first' && !cardRedactionFlag" @click.prevent="moveCardToSecond"> » </button>
<button class="move_btn btn_style" v-show="column_id=='second' && !cardRedactionFlag" @click.prevent="moveCardToThird"> » </button>

<button class="move_btn btn_style" v-show="column_id=='third' && !showReasonRefundFlag" @click.prevent="showReasonRefundFlag= true"> « </button>
<p v-if="showReasonRefundFlag"><b>Причина возврата:</b>
<span v-if="showReasonRefundFlag && errorRefund != null" class="red_text"> {{ errorRefund }} </span>
<input v-if="showReasonRefundFlag" type="text" v-model="exampleCard.reasonRefund">
</p>
<button class="move_btn btn_style" v-show="column_id=='third' && showReasonRefundFlag" @click.prevent="cancelRemoving">Отмена</button>
<button class="move_btn btn_style" v-show="column_id=='third' && showReasonRefundFlag" @click.prevent="moveCardToSecondFromThird">Вернуть</button>

<button class="move_btn btn_style" v-show="column_id=='third' && !cardRedactionFlag" @click.prevent="moveCardToFourth"> » </button>
</div>
`,
methods: {
submitRedForm() {
if (this
.blankForRedaction.title) {
this.exampleCard.title = this.blankForRedaction.title;
}
if (this.blankForRedaction.description) {
this.exampleCard.description = this.blankForRedaction.description;
}
if (this.blankForRedaction.deadline) {
this.exampleCard.deadline = this.blankForRedaction.deadline;
}
if (this.blankForRedaction.title || this.blankForRedaction.description || this.blankForRedaction.deadline) {
this.exampleCard.dateOfRed.year = this.blankForRedaction.dateOfRed.year;
this.exampleCard.dateOfRed.month = this.blankForRedaction.dateOfRed.month;
this.exampleCard.dateOfRed.day = this.blankForRedaction.dateOfRed.day;
this.exampleCard.dateOfRed.hour = this.blankForRedaction.dateOfRed.hour;
this.exampleCard.dateOfRed.min = this.blankForRedaction.dateOfRed.min;
}

this.blankForRedaction.title = null;
this.blankForRedaction.description = null;
this.blankForRedaction.deadline = null;
this.cardRedactionFlag = false;
},
cancelRedaction() {
this.blankForRedaction.title = null;
this.blankForRedaction.description = null;
this.blankForRedaction.deadline = null;
this.cardRedactionFlag = false;
},
moveCardToSecond() {
let copy = this.copyCard();
eventBus.$emit('move-card-to-second', copy);
eventBus.$emit('delete-from-first', this.indexInList);
},
moveCardToThird() {
let copy = this.copyCard();
eventBus.$emit('move-card-to-third', copy);
eventBus.$emit('delete-from-second', this.indexInList);
},
moveCardToSecondFromThird() {
this.errorRefund = null;
if (!this.exampleCard.reasonRefund) {
this.errorRefund = "Нужно указать причину возврата";
} else {
// Инициализируем reasonsRefund, если оно отсутствует
if (!this.exampleCard.reasonsRefund) {
this.exampleCard.reasonsRefund = [];
}
// Добавляем причину возврата в массив
this.exampleCard.reasonsRefund.push(this.exampleCard.reasonRefund);

// Очищаем поле причины для нового ввода
this.exampleCard.reasonRefund = null;

let copy = this.copyCard();
eventBus.$emit('move-card-to-second', copy);
eventBus.$emit('delete-from-third', this.indexInList);
}
},
moveCardToFourth() {
let copy = this.copyCard();
eventBus.$emit('move-card-to-fourth', copy);
eventBus.$emit('delete-from-third', this.indexInList);
},
cancelRemoving() {
this.showReasonRefundFlag = false;
},
deleteCard(index) {
eventBus.$emit('delete-from-first', index);
},
copyCard() {
let copy = Object.assign({}, this.exampleCard);
copy.date = Object.assign({}, this.exampleCard.date);
copy.dateOfRed = Object.assign({}, this.exampleCard.dateOfRed);
return copy;
}
}
});
